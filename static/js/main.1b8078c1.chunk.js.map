{"version":3,"sources":["Hooks/store.js","Hooks/mutation.js","Canvas/Animation/Rig.jsx","Canvas/Effects.jsx","Canvas/Minimap.jsx","Canvas/Mesh/Brain.jsx","Canvas/Mesh/Neuron.jsx","Canvas/Animation/Action.jsx","Canvas/Animation/BrainBlink.jsx","Canvas/Animation/Ensemble.jsx","utils.js","Canvas/Scene.jsx","App.jsx","index.jsx"],"names":["useStore","create","set","get","tracks","setTracks","fn","produce","animation","index","phase","setAnimation","skeletons","setSkeletons","neurons","setNeurons","initAnimation","mutation","addEffect","time","Date","now","t","startTime","length","tl","parameters","path","getLength","position","getPointAt","useMutation","THREE","Rig","children","group","useRef","rig","state","mouse","useThree","vec","up","quaternion","count","useFrame","camera","pos","clone","current","copy","y","x","z","lerp","lookAt","Math","min","matrix","setFromRotationMatrix","slerp","zoom","updateProjectionMatrix","ref","args","visible","Effects","viewport","priority","composer","three","scene","gl","size","aspect","useMemo","width","height","useEffect","setSize","setScissorTest","setViewport","setScissor","render","attachArray","extend","EffectComposer","ShaderPass","RenderPass","UnrealBloomPass","defaultProps","Minimap","mapWidth","mapHeight","anchor","vpBottom","vpLeft","OrthographicCamera","far","left","right","top","bottom","noClear","Brain","geo","filename","rest","nodes","useGLTF","process","Object","values","scale","translate","object","attach","wireframe","opacity","transparent","metalness","roughness","clearcoat","clearcoatRoughtness","side","color","Neuron","skeleton","uniColor","dendriteColor","apicalColor","axonColor","somaColor","root","filter","near","map","traversal","clearcoatRoughness","types","Line","points","lineWidth","hypot","includes","randomColor","s","l","floor","random","Action","nextPhase","DENDRITE_SKELETON","DENDRITE_SKELETON_SET","Set","AXON_SKELETON","AXON_SKELETON_SET","DENDRITE_TIP_FIBERS","AXON_FIRST_FIBERS","React","useState","dendriteFired","setDendriteFired","axonFired","setAxonFired","activated","setActivated","useSprings","to","next","cancel","a","concat","reverse","p","from","config","duration","pause","onRest","fired","add","dendriteSprings","dendriteAPI","axonSprings","axonAPI","start","has","isSuperset","i","AnimatedBrain","style","mesh","o","meshPhysicalMaterial","r","BrainBlink","brains","useSpring","delay","finished","Ensemble","startBrains","endBrains","setPhase","setTimeout","loadSWC","fetch","resp","text","lines","hash","neuron","split","line","startsWith","n","type","parent","Number","parent_index","forEach","node","hasOwnProperty","push","computeTraversal","fromRoot","toRoot","dfs","pop","longestTraversal","reduce","b","computeSkeleton","child","farNode","tips","que","shift","flag","bfs","keys","Scene","swcFiles","getSkeletons","Promise","all","store","splice","curve","e","loadData","intensity","fallback","App","display","onCreated","OrbitControls","enableZoom","enablePan","enableRotate","Container","props","inset","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1b8078c1.chunk.js","sourcesContent":["import create from 'zustand'\r\nimport { addEffect } from '@react-three/fiber'\r\nimport produce from 'immer'\r\n\r\n// for storing swc and its animation state\r\n\r\nconst useStore = create((set, get) => ({\r\n  tracks: [],\r\n  setTracks: (fn) => set(produce(({ tracks }) => fn(tracks))),\r\n\r\n  animation: { index: 0, phase: 0 },\r\n  setAnimation: (fn) => set(produce(({ animation }) => fn(animation))),\r\n\r\n  skeletons: [],\r\n  setSkeletons: (fn) => set(produce(({ skeletons }) => fn(skeletons))),\r\n\r\n  neurons: [],\r\n  setNeurons: (fn) => set(produce(({ neurons }) => fn(neurons))),\r\n\r\n  // brains: [\r\n  //   // { filename: '6_1.gltf', color: [204 / 255, 204 / 255, 204 / 255], opacity: 0.1, roughness: 0, clearcoatRoughness: 0 },\r\n  //   // { filename: '1022_1.gltf', color: [133 / 255, 153 / 255, 204 / 255], opacity: 0.1, roughness: 0, clearcoatRoughness: 0 },\r\n  //   // { filename: '381_1.gltf', color: [1, 144 / 255, 1], opacity: 0.7, roughness: 0.5, clearcoatRoughness: 0 },\r\n  //   // { filename: '672_1.gltf', color: [152 / 255, 214 / 255, 249 / 255], opacity: 0.1, roughness: 0, clearcoatRoughness: 0 },\r\n  //   { filename: '997.gltf', color: [1, 1, 1], opacity: 0.05 },\r\n  // ],\r\n  // setBrains: (fn) => set(produce(({ brains }) => fn(brains))),\r\n  // resetClock: () => {\r\n  //   set(\r\n  //     produce(({ mutation }) => {\r\n  //       mutation.t = 0\r\n  //       mutation.startTime = Date.now()\r\n  //     })\r\n  //   )\r\n  // },\r\n\r\n  // pushTrack: (coords) => {\r\n  //   set(\r\n  //     produce((state) => {\r\n  //       let curve = new THREE.CatmullRomCurve3(coords.map((pos) => new THREE.Vector3(...pos)))\r\n  //       let tubeGeometry = new THREE.TubeGeometry(curve, coords.length * 5, 0.2, 10, true)\r\n  //       // state.tracks.push(tubeGeometry)\r\n  //       state.mutation.track = tubeGeometry\r\n  //     })\r\n  //   )\r\n  // },\r\n\r\n  // turnOffBrain: (index) => {\r\n  //   set((state) => {\r\n  //     state.brains[index]['transparent'] = true\r\n  //     state.brains[index]['roughness'] = 0\r\n  //     state.brains[index]['clearcoatRoughness'] = 0\r\n  //   })\r\n  // },\r\n  // turnOnBrain: (index) => {\r\n  //   set((state) => {\r\n  //     state.brains[index]['transparent'] = false\r\n  //     state.brains[index]['roughness'] = 0.5\r\n  //     state.brains[index]['clearcoatRoughness'] = 1\r\n  //   })\r\n  // },\r\n  initAnimation: (mutation) => {\r\n    addEffect(() => {\r\n      const { tracks, animation } = get()\r\n      const time = Date.now()\r\n      let t = null\r\n      if (animation.phase === 1) {\r\n        t = mutation.t = 0\r\n        mutation.startTime = time\r\n      } else if (animation.phase === 3) {\r\n        t = mutation.t = 1\r\n      }\r\n      if (tracks.length > 0) {\r\n        if (t === null) {\r\n          const tl = tracks[animation.index].parameters.path.getLength() * 2.5\r\n          t = mutation.t = (time - mutation.startTime) / tl\r\n          if (t > 1) {\r\n            t = mutation.t = 1\r\n          }\r\n        }\r\n        mutation.position = tracks[animation.index].parameters.path.getPointAt(t)\r\n      }\r\n    })\r\n  },\r\n}))\r\n\r\nexport default useStore\r\n","import * as THREE from 'three'\r\nimport create from 'zustand'\r\n\r\n// for camera rig animation\r\n\r\nconst useMutation = create((set, get) => ({\r\n  mutation: {\r\n    t: 0,\r\n    position: new THREE.Vector3(),\r\n    startTime: Date.now(),\r\n  },\r\n}))\r\n\r\nexport default useMutation\r\n","import React, { useRef } from 'react'\r\nimport * as THREE from 'three'\r\n// r3f\r\nimport { useThree, useFrame } from '@react-three/fiber'\r\nimport { Sphere } from '@react-three/drei'\r\n// hooks\r\nimport useStore from '../../Hooks/store'\r\nimport useMutation from '../../Hooks/mutation'\r\n\r\nexport default function Rig({ children }) {\r\n  const group = useRef()\r\n  const rig = useRef()\r\n  const { tracks, animation } = useStore()\r\n  const mutation = useMutation((state) => state.mutation)\r\n  const { mouse } = useThree()\r\n  const vec = new THREE.Vector3()\r\n  const up = new THREE.Vector3(0, 1, 0)\r\n  const quaternion = new THREE.Quaternion()\r\n  let count = 0\r\n  useFrame(({ camera }) => {\r\n    const t = mutation.t\r\n    if (tracks.length > 0) {\r\n      let pos = mutation.position.clone()\r\n      group.current.position.copy(mutation.position.clone())\r\n      group.current.position.y = 19000\r\n      pos.x += 800\r\n      pos.y -= 800 - t * 5000\r\n      // pos.z = pos.z * -1\r\n      pos.z *= 1.3\r\n      if (count > 100) {\r\n        camera.position.lerp(pos, 0.003 * count)\r\n      } else {\r\n        camera.position.lerp(pos, 0.003 * count)\r\n        count += 1\r\n      }\r\n      // camera.position.copy(pos)\r\n      // can cause issue when refreshing components\r\n      if (t > 0 && t < 1) camera.position.lerp(vec.set(mouse.x * 2000, mouse.y * 2000, 0), 0.05)\r\n      const lookAt = tracks[animation.index].parameters.path.getPointAt(\r\n        // Math.max(Math.min(t + 10 / tracks[animation.index].parameters.path.getLength(), 1), 0)\r\n        Math.min(1, t + 0.1)\r\n      )\r\n      // lookAt.x += 500\r\n      // lookAt.y -= 500\r\n      lookAt.z *= 1.1\r\n      camera.matrix.lookAt(camera.position, lookAt, up)\r\n      quaternion.setFromRotationMatrix(camera.matrix)\r\n      camera.quaternion.slerp(quaternion, 0.8)\r\n      camera.zoom = 1\r\n      camera.updateProjectionMatrix()\r\n      // const lightPos = track.parameters.path.getPointAt((t + 1 / track.parameters.path.getLength()) % 1)\r\n      // group.current.position.copy(cpos.multiplyScalar(0.68))\r\n      // group.current.position.copy(pos)\r\n      // group.current.quaternion.setFromRotationMatrix(camera.matrix)\r\n    }\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <group ref={group}>\r\n        {/* <pointLight distance={1000} position={[0, 0, 0]} intensity={1.5} /> */}\r\n        <Sphere args={[100]} visible={animation.phase === 2} />\r\n        <group ref={rig} position={[0, 0, 0]}>\r\n          {children}\r\n        </group>\r\n      </group>\r\n    </>\r\n  )\r\n}\r\n","import React, { useRef, useMemo, useEffect } from 'react'\r\nimport * as THREE from 'three'\r\n// r3f\r\nimport { extend, useThree, useFrame } from '@react-three/fiber'\r\n// three.js examples\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\r\n\r\nextend({ EffectComposer, ShaderPass, RenderPass, UnrealBloomPass })\r\n\r\nexport default function Effects({ camera, viewport, priority }) {\r\n  const composer = useRef()\r\n  const three = useThree()\r\n  const { scene, gl, size } = three\r\n  const aspect = useMemo(() => new THREE.Vector2(512, 512), [])\r\n  if (typeof camera === 'undefined') camera = three.camera\r\n  if (typeof viewport === 'undefined') viewport = [0, 0, size.width, size.height]\r\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\r\n  useFrame(() => {\r\n    gl.setScissorTest(true)\r\n    gl.setViewport(...viewport)\r\n    gl.setScissor(...viewport)\r\n    composer.current.render()\r\n    // gl.render(scene, camera)\r\n    gl.setScissorTest(false)\r\n  }, priority)\r\n  return (\r\n    <effectComposer ref={composer} args={[gl]}>\r\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n      <unrealBloomPass attachArray=\"passes\" args={[aspect, 1.5, 1, 0]} />\r\n    </effectComposer>\r\n  )\r\n}\r\n\r\nEffects.defaultProps = {\r\n  priority: 1,\r\n}\r\n","import { useRef, useEffect } from 'react'\r\n// r3f\r\nimport { useThree } from '@react-three/fiber'\r\nimport { OrthographicCamera } from '@react-three/drei'\r\n// rendering & postprocessing\r\nimport Effects from './Effects'\r\n\r\nexport default function Minimap({ mapWidth, mapHeight, anchor }) {\r\n  const { width, height } = useThree((state) => state.size)\r\n  const camera = useRef()\r\n  let vpBottom = anchor === 'ne' || anchor === 'nw' ? height - mapHeight : 0\r\n  let vpLeft = anchor === 'ne' || anchor === 'se' ? width - mapWidth : 0\r\n  useEffect(() => {\r\n    camera.current.lookAt(0, -1, 0)\r\n  }, [camera])\r\n  return (\r\n    <>\r\n      <OrthographicCamera\r\n        ref={camera}\r\n        far={100000}\r\n        left={-6000}\r\n        right={6000}\r\n        top={7000}\r\n        bottom={-7000}\r\n        up={[-1, 0, 0]}\r\n        position={[0, 20000, 0]}\r\n      />\r\n      <Effects camera={camera.current} viewport={[vpLeft, vpBottom, mapWidth, mapHeight]} noClear priority={10} />\r\n    </>\r\n  )\r\n}\r\n","// import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader'\r\nimport { useGLTF } from '@react-three/drei'\r\n// import { useLoader } from '@react-three/fiber'\r\nimport * as THREE from 'three'\r\n\r\nexport default function Brain({ filename, ...rest }) {\r\n  let geo\r\n  // if (filename.endsWith('gltf')) {\r\n  const { nodes } = useGLTF(process.env.PUBLIC_URL + '/obj/' + filename)\r\n  geo = Object.values(nodes)[0]['geometry'].clone(true).scale(-1, -1, -1).translate(6600, 4000, 5700)\r\n  // } else {\r\n  //   const obj = useLoader(OBJLoader, '/obj/' + filename)\r\n  //   geo = obj.children[0]['geometry'].clone(true).scale(-1, -1, -1).translate(6600, 4000, 5700)\r\n  // }\r\n  return (\r\n    <mesh>\r\n      <primitive object={geo} attach=\"geometry\" />\r\n      <meshPhysicalMaterial wireframe={true} {...rest} />\r\n    </mesh>\r\n  )\r\n}\r\n\r\nBrain.defaultProps = {\r\n  opacity: 0.1,\r\n  transparent: true,\r\n  metalness: 0.7,\r\n  roughness: 0,\r\n  clearcoat: 1,\r\n  clearcoatRoughtness: 0,\r\n  side: THREE.DoubleSide,\r\n  color: '#f0f0f0',\r\n}\r\n","// r3f\r\nimport { useThree } from '@react-three/fiber'\r\nimport { Sphere, Line } from '@react-three/drei'\r\n\r\nexport default function Neuron({ skeleton, uniColor, dendriteColor, apicalColor, axonColor, somaColor, visible }) {\r\n  if (typeof uniColor !== 'undefined') {\r\n    axonColor = uniColor\r\n    dendriteColor = uniColor\r\n    apicalColor = uniColor\r\n  }\r\n  const color = [somaColor, axonColor, dendriteColor, apicalColor]\r\n  const root = Object.values(skeleton).filter(({ near }) => near === null)\r\n  const { size } = useThree()\r\n  return (\r\n    <group visible={visible}>\r\n      {root.map(({ traversal }, index) => (\r\n        <Sphere key={index} args={[10, 100, 100]} position={traversal[0]}>\r\n          <meshPhysicalMaterial\r\n            color={color[0]}\r\n            transparent={false}\r\n            clearcoat={1}\r\n            // opacity={0.5}\r\n            roughness={0.5}\r\n            metalness={0}\r\n            clearcoatRoughness={1}\r\n          />\r\n        </Sphere>\r\n      ))}\r\n      {Object.values(skeleton)\r\n        .filter(({ near }) => near !== null)\r\n        .map(({ traversal, types }) => (\r\n          <Line\r\n            points={traversal}\r\n            lineWidth={1080 / Math.hypot(size.width, size.height)}\r\n            color={types.includes(4) ? apicalColor : types.includes(3) ? dendriteColor : axonColor}\r\n          />\r\n        ))}\r\n      {/*<Line lineWidth={0.5}>*/}\r\n      {/*  {neuron.map(({ type, parent_index, x, y, z, index }) => {*/}\r\n      {/*    const p = neuron[parent_index]*/}\r\n      {/*    return typeof p === 'undefined' ? null : <Segment key={index} start={[p.x, p.y, p.z]} end={[x, y, z]} color={color[type - 1]} />*/}\r\n      {/*  })}*/}\r\n      {/*</Segments>*/}\r\n    </group>\r\n  )\r\n}\r\n\r\nNeuron.defaultProps = {\r\n  somaColor: 'snow',\r\n  dendriteColor: 'seagreen',\r\n  axonColor: 'orangered',\r\n  apicalColor: 'royalblue',\r\n}\r\n","import React, { useEffect } from 'react'\r\n// r3f\r\nimport { useSprings, animated } from '@react-spring/three'\r\nimport { Sphere } from '@react-three/drei'\r\nimport { Set } from 'immutable'\r\n\r\nfunction randomColor(s, l) {\r\n  const colorAngle = Math.floor(Math.random() * 360)\r\n  const color = 'hsl(' + colorAngle + ',' + s + ',' + l + ')'\r\n  return color\r\n}\r\n\r\nexport default function Action({ skeleton, nextPhase }) {\r\n  /* \r\n  item of neuron:\r\n  {\r\n    n: id by swc file\r\n    parent: parent id by swc file, roots' parents are -1\r\n    x: pos x\r\n    y: pos y\r\n    z: pos z\r\n    r: radius\r\n    index: id by line, starting from 0\r\n    parent_index: parent id by line\r\n    children: id by line of nodes connecting down from the root\r\n  }\r\n  \r\n  item of skeleton (key is the far index):\r\n  {\r\n    traversal: [x, y, z] point sequence of this fiber\r\n    near: index of the node on the fiber nearer to root, corresponding to line index in neuron\r\n    far: index of the node on the fiber farther to root\r\n    children: indices of the far nodes of fibers extending away from root\r\n    types: terminal types of this fiber\r\n  }\r\n  */\r\n\r\n  // get skeleton's array ref, filtering roots\r\n  const DENDRITE_SKELETON = Object.values(skeleton).filter(({ near, types }) => near !== null && !types.includes(2))\r\n  const DENDRITE_SKELETON_SET = Set(DENDRITE_SKELETON.map(({ far }) => far))\r\n  // get skeleton's array ref, filtering roots\r\n  const AXON_SKELETON = Object.values(skeleton).filter(({ near, types }) => near !== null && types.includes(2))\r\n  const AXON_SKELETON_SET = Set(AXON_SKELETON.map(({ far }) => far))\r\n\r\n  // Set, dendrite tips\r\n  const DENDRITE_TIP_FIBERS = Set(\r\n    DENDRITE_SKELETON.map(({ children, types }, index) => (children.length === 0 && !types.includes(2) ? index : null)).filter(\r\n      (index) => index !== null\r\n    )\r\n  )\r\n  // starting fibers for axon phase\r\n  const AXON_FIRST_FIBERS = Set(\r\n    AXON_SKELETON.map(({ near, types }, index) => (skeleton[near].near === null && types.includes(2) ? index : null)).filter(\r\n      (index) => index !== null\r\n    )\r\n  )\r\n  // fired fibers set, judging whether to change phase, far nodes\r\n  const [dendriteFired, setDendriteFired] = React.useState(Set())\r\n  const [axonFired, setAxonFired] = React.useState(Set())\r\n\r\n  // flag the phase\r\n  const [activated, setActivated] = React.useState(false)\r\n\r\n  // dendrite springs\r\n  const [dendriteSprings, dendriteAPI] = useSprings(DENDRITE_SKELETON.length, (index) => {\r\n    const { far, traversal } = DENDRITE_SKELETON[index]\r\n    return {\r\n      to: async (next, cancel) => {\r\n        for (let p of traversal.concat().reverse())\r\n          await next({\r\n            position: p,\r\n            visible: true,\r\n          })\r\n\r\n        await next({ visible: false })\r\n      },\r\n      from: { position: traversal[traversal.length - 1], visible: false },\r\n      config: {\r\n        duration: 1,\r\n      },\r\n      pause: true,\r\n      onRest: () => {\r\n        setDendriteFired((fired) => fired.add(far))\r\n      },\r\n    }\r\n  })\r\n\r\n  // axon springs\r\n  const [axonSprings, axonAPI] = useSprings(AXON_SKELETON.length, (index) => {\r\n    const { far, traversal } = AXON_SKELETON[index]\r\n    return {\r\n      to: async (next, cancel) => {\r\n        for (let p of traversal)\r\n          await next({\r\n            position: p,\r\n            visible: true,\r\n          })\r\n\r\n        await next({ visible: false })\r\n      },\r\n\r\n      from: { position: traversal[0], visible: false },\r\n      config: {\r\n        duration: 1,\r\n      },\r\n      pause: true,\r\n      onRest: () => {\r\n        setAxonFired((fired) => fired.add(far))\r\n      },\r\n    }\r\n  })\r\n  useEffect(() => {\r\n    if (activated)\r\n      axonAPI.start((index) => {\r\n        if (AXON_FIRST_FIBERS.has(index)) return { pause: false }\r\n      })\r\n    else\r\n      dendriteAPI.start((index) => {\r\n        if (DENDRITE_TIP_FIBERS.has(index)) {\r\n          return { pause: false }\r\n        }\r\n      })\r\n  }, [activated])\r\n\r\n  useEffect(() => {\r\n    if (axonFired.isSuperset(AXON_SKELETON_SET)) nextPhase()\r\n    if (activated)\r\n      axonAPI.start((index) => {\r\n        const { far, near } = AXON_SKELETON[index]\r\n        if (axonFired.has(far)) return\r\n        if (axonFired.has(near)) return { pause: false }\r\n      })\r\n  }, [axonFired])\r\n\r\n  useEffect(() => {\r\n    if (dendriteFired.isSuperset(DENDRITE_SKELETON_SET)) setActivated(true)\r\n    dendriteAPI.start((index) => {\r\n      const { far, children } = DENDRITE_SKELETON[index]\r\n      if (dendriteFired.has(far)) return\r\n      if (dendriteFired.isSuperset(Set(children))) return { pause: false }\r\n    })\r\n  }, [dendriteFired])\r\n\r\n  return (\r\n    <>\r\n      {dendriteSprings.map(({ position, visible }, i) => {\r\n        return (\r\n          <animated.group key={i} position={position} visible={visible}>\r\n            <Sphere args={[10, 4, 2]}>\r\n              <meshPhysicalMaterial\r\n                color={randomColor('100%', '80%')}\r\n                transparent={false}\r\n                clearcoat={1}\r\n                roughness={0.5}\r\n                metalness={0}\r\n                clearcoatRoughness={1}\r\n              />\r\n            </Sphere>\r\n          </animated.group>\r\n        )\r\n      })}\r\n      {axonSprings.map(({ position, visible }, i) => {\r\n        return (\r\n          <animated.group key={i} position={position} visible={visible}>\r\n            <Sphere args={[20, 4, 2]}>\r\n              <meshPhysicalMaterial\r\n                color={randomColor('100%', '80%')}\r\n                transparent={false}\r\n                clearcoat={1}\r\n                roughness={0.5}\r\n                metalness={0}\r\n                clearcoatRoughness={1}\r\n              />\r\n            </Sphere>\r\n          </animated.group>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSpring, animated } from '@react-spring/three'\r\nimport { useGLTF } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\n\r\nfunction AnimatedBrain({ filename, style, ...rest }) {\r\n  const { nodes } = useGLTF(process.env.PUBLIC_URL + '/obj/' + filename)\r\n  const geo = Object.values(nodes)[0]['geometry'].clone(true).scale(-1, -1, -1).translate(6600, 4000, 5700)\r\n  return (\r\n    <animated.mesh position={style.opacity.to((o) => [0, o * 1000, 0])}>\r\n      <primitive object={geo} attach=\"geometry\" />\r\n      <animated.meshPhysicalMaterial opacity={style.opacity.to((o) => o + 0.2)} roughness={style.roughness.to((r) => r)} {...rest} />\r\n    </animated.mesh>\r\n  )\r\n}\r\n\r\nAnimatedBrain.defaultProps = {\r\n  transparent: true,\r\n  metalness: 0.7,\r\n  clearcoat: 1,\r\n  clearcoatRoughness: 0,\r\n  side: THREE.DoubleSide,\r\n  color: '#f0f0f0',\r\n}\r\n\r\nexport default function BrainBlink({ brains, nextPhase }) {\r\n  const style = useSpring({\r\n    to: async (next, cancel) => {\r\n      await next({ opacity: 0.5, roughness: 0.5 })\r\n      await next({ opacity: 0.1, roughness: 0 })\r\n    },\r\n    delay: 1000,\r\n    from: { opacity: 0.1, roughness: 0 },\r\n    onRest: (...args) => {\r\n      if (args[0].finished) nextPhase()\r\n    },\r\n  })\r\n  return brains.map(({ filename, color }) => <AnimatedBrain style={style} filename={filename} color={color} />)\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { SpringContext } from '@react-spring/three'\r\nimport Action from './Action'\r\nimport BrainBlink from './BrainBlink'\r\n\r\nexport default function Ensemble({ startBrains, skeleton, endBrains, phase, setPhase }) {\r\n  useEffect(() => {\r\n    if (phase === 0) {\r\n      setTimeout(() => {\r\n        setPhase(1)\r\n      }, 3000)\r\n    }\r\n  }, [phase])\r\n  return (\r\n    <>\r\n      <SpringContext pause={phase !== 1}>\r\n        <BrainBlink brains={startBrains} nextPhase={() => setPhase(2)} />\r\n      </SpringContext>\r\n      <SpringContext pause={phase !== 3}>\r\n        <BrainBlink brains={endBrains} nextPhase={() => setPhase(4)} />\r\n      </SpringContext>\r\n      {phase === 2 ? <Action skeleton={skeleton} nextPhase={() => setPhase(3)} /> : null}\r\n    </>\r\n  )\r\n}\r\n","async function loadSWC(path) {\r\n  const resp = await fetch(path)\r\n  const lines = await resp.text()\r\n  let hash = {}\r\n  let neuron = lines\r\n    .split('\\n')\r\n    .filter((line) => !line.startsWith('#') && line)\r\n    .map((line, i) => {\r\n      let [n, type, x, y, z, r, parent] = line.split(' ')\r\n      n = Number(n)\r\n      type = Number(type)\r\n      parent = Number(parent)\r\n      hash[n] = i\r\n      return {\r\n        n,\r\n        type,\r\n        x: -x * 25 + 6600,\r\n        y: -y * 25 + 4000,\r\n        z: -z * 25 + 5700,\r\n        r: r * 25,\r\n        parent,\r\n        parent_index: null,\r\n        index: i,\r\n        children: [],\r\n      }\r\n    })\r\n  neuron.forEach((node, i) => {\r\n    if (hash.hasOwnProperty(node.parent)) {\r\n      node.parent_index = hash[node.parent]\r\n      neuron[node.parent_index].children.push(i)\r\n    }\r\n  })\r\n  return neuron\r\n}\r\n\r\nfunction computeTraversal(neuron) {\r\n  let fromRoot = [],\r\n    toRoot = [],\r\n    traversal = []\r\n\r\n  function dfs({ children, x, y, z, type }) {\r\n    traversal.push([x, y, z])\r\n    if (children.length) {\r\n      children.forEach((index) => dfs(neuron[index]))\r\n    } else {\r\n      if (type === 2) fromRoot.push(traversal.concat())\r\n      else toRoot.push(traversal.concat().reverse())\r\n    }\r\n    traversal.pop()\r\n  }\r\n  neuron.filter(({ parent }) => parent === -1).forEach((node) => dfs(node))\r\n  return { fromRoot, toRoot }\r\n}\r\n\r\nfunction longestTraversal(neuron) {\r\n  const { fromRoot, toRoot } = computeTraversal(neuron)\r\n  // return [...toRoot.reduce((a, b) => (a.length > b.length ? a : b)), ...fromRoot.reduce((a, b) => (a.length > b.length ? a : b))]\r\n  return fromRoot.reduce((a, b) => (a.length > b.length ? a : b))\r\n}\r\n\r\nfunction computeSkeleton(neuron) {\r\n  let skeleton = {}\r\n\r\n  // compute skeleton based on dfs\r\n  function dfs(node) {\r\n    node.children.forEach((child) => {\r\n      let farNode = neuron[child]\r\n      let traversal = [\r\n        [node.x, node.y, node.z],\r\n        [farNode.x, farNode.y, farNode.z],\r\n      ]\r\n      while (farNode.children.length === 1) {\r\n        farNode = neuron[farNode.children[0]]\r\n        traversal.push([farNode.x, farNode.y, farNode.z])\r\n      }\r\n      skeleton[farNode.index] = {\r\n        traversal,\r\n        far: farNode.index,\r\n        near: node.index,\r\n        children: [],\r\n        // terminal types: axon/2, dendrite/3, apical/4\r\n        types: farNode.children.length === 0 ? [neuron[farNode.index].type] : [],\r\n      }\r\n      if (farNode.children.length > 0) dfs(farNode)\r\n    })\r\n  }\r\n\r\n  // compute skeleton\r\n  neuron\r\n    .filter(({ parent }) => parent === -1)\r\n    .forEach((node) => {\r\n      skeleton[node.index] = {\r\n        traversal: [[node.x, node.y, node.z]],\r\n        far: node.index,\r\n        near: null,\r\n        children: [],\r\n        types: [node.index.type],\r\n      }\r\n      dfs(node)\r\n    })\r\n  // tagging children, for roots that have null near node, skip\r\n  for (let index in skeleton) {\r\n    const { far, near } = skeleton[index]\r\n    if (skeleton.hasOwnProperty(near)) skeleton[near].children.push(far)\r\n  }\r\n  // tagging termination from tip to soma, based on bfs\r\n  function bfs(tips) {\r\n    let que = tips\r\n    while (que.length > 0) {\r\n      const { types, near } = skeleton[que.shift()]\r\n      if (near === null) continue\r\n      let flag = false\r\n      types.forEach((type) => {\r\n        if (!skeleton[near].types.includes(type)) {\r\n          skeleton[near].types.push(type)\r\n          flag = true\r\n        }\r\n      })\r\n      if (flag && !que.includes(near)) que.push(near)\r\n    }\r\n  }\r\n  bfs(Object.keys(skeleton).filter((index) => skeleton[index].children.length === 0))\r\n  return skeleton\r\n}\r\n\r\n// function decomposeSkeleton(neuron) {\r\n//   let degenAxonAbor = {},\r\n//     degenDendriteAbor = {},\r\n//     dendriteTip = [],\r\n//     axonTip = [],\r\n//     skeleton = {}\r\n\r\n//   function dfs(node) {\r\n//     node.children.forEach((child) => {\r\n//       let farNode = neuron[child]\r\n//       let traversal = [\r\n//         [node.x, node.y, node.z],\r\n//         [farNode.x, farNode.y, farNode.z],\r\n//       ]\r\n//       while (farNode.children.length === 1) {\r\n//         farNode = neuron[farNode.children[0]]\r\n//         traversal.push([farNode.x, farNode.y, farNode.z])\r\n//       }\r\n//       // let curve = new THREE.CatmullRomCurve3(traversal.map((pos) => new THREE.Vector3(...pos)))\r\n//       skeleton[farNode.index] = { traversal, far: farNode.index, near: node.index }\r\n//       if (farNode.children.length === 0) {\r\n//         if (farNode.type === 2) {\r\n//           let temp1 = farNode.index\r\n//           while (skeleton.hasOwnProperty(temp1)) {\r\n//             let temp2 = skeleton[temp1].near\r\n//             if (!degenAxonAbor.hasOwnProperty(temp2)) degenAxonAbor[temp2] = new Set()\r\n//             degenAxonAbor[temp2].add(temp1)\r\n//             temp1 = temp2\r\n//           }\r\n//           axonTip.push(farNode.index)\r\n//         } else {\r\n//           let temp1 = farNode.index\r\n//           while (skeleton.hasOwnProperty(temp1)) {\r\n//             let temp2 = skeleton[temp1].near\r\n//             if (!degenDendriteAbor.hasOwnProperty(temp2)) degenDendriteAbor[temp2] = new Set()\r\n//             degenDendriteAbor[temp2].add(temp1)\r\n//             temp1 = temp2\r\n//           }\r\n//           dendriteTip.push(farNode.index)\r\n//         }\r\n//       } else dfs(farNode)\r\n//     })\r\n//   }\r\n//   neuron.filter(({ parent }) => parent === -1).forEach((node) => dfs(node))\r\n//   return { degenAxonAbor, degenDendriteAbor, axonTip, dendriteTip, skeleton }\r\n// }\r\n\r\nexport { loadSWC, computeSkeleton, longestTraversal }\r\n","import { Suspense, useState, useEffect } from 'react'\r\nimport * as THREE from 'three'\r\n// r3f\r\nimport { useThree } from '@react-three/fiber'\r\n// custom canvas components\r\nimport Rig from './Animation/Rig'\r\nimport Effects from './Effects'\r\nimport Minimap from './Minimap'\r\nimport Brain from './Mesh/Brain'\r\nimport Neuron from './Mesh/Neuron'\r\nimport Ensemble from './Animation/Ensemble'\r\n// hooks\r\nimport useStore from '../Hooks/store'\r\n// util func\r\nimport { computeSkeleton, loadSWC, longestTraversal } from '../utils.js'\r\n\r\nexport default function Scene() {\r\n  const { skeletons, animation, setAnimation, setNeurons, setSkeletons, setTracks, tracks } = useStore()\r\n  const { size } = useThree()\r\n  const [swcFiles, setSwcFiles] = useState([\r\n    '17109_2401_x8977_y24184.semi_r.swc',\r\n    '236174_3729_x12692_y9419.semi_r.swc',\r\n    '17302_00039.semi_r.swc',\r\n  ])\r\n  const startBrains = [\r\n    [{ filename: '985_1.gltf', color: [31 / 255, 157 / 255, 90 / 255] }],\r\n    [{ filename: '583_1.gltf', color: [138 / 255, 218 / 255, 135 / 255] }],\r\n    [{ filename: '170_1.gltf', color: [255 / 255, 128 / 255, 132 / 255] }],\r\n  ]\r\n  const endBrains = [\r\n    [\r\n      { filename: '993_2.gltf', color: [31 / 255, 157 / 255, 90 / 255] },\r\n      { filename: '985_2.gltf', color: [31 / 255, 157 / 255, 90 / 255] },\r\n      { filename: '993_1.gltf', color: [31 / 255, 157 / 255, 90 / 255] },\r\n    ],\r\n    [\r\n      { filename: '886_1.gltf', color: [26 / 255, 166 / 255, 152 / 255] },\r\n      { filename: '879_1.gltf', color: [26 / 255, 166 / 255, 152 / 255] },\r\n    ],\r\n    [\r\n      { filename: '385_1.gltf', color: [8 / 255, 13 / 255, 140 / 255] },\r\n      { filename: '262_1.gltf', color: [155 / 255, 144 / 255, 159 / 255] },\r\n    ],\r\n  ]\r\n  useEffect(() => {\r\n    async function loadData(getSkeletons = false) {\r\n      const neurons = await Promise.all(swcFiles.map((filename) => loadSWC(process.env.PUBLIC_URL + '/swc/' + filename)))\r\n      setNeurons((store) => {\r\n        store.splice(0)\r\n        store.push(...neurons)\r\n      })\r\n      const tracks = neurons.map(longestTraversal).map((traversal) => {\r\n        // console.log(traversal[1])\r\n        // console.log(neurons[0][0])\r\n        let curve = new THREE.CatmullRomCurve3(\r\n          traversal.filter((e, i) => i % 100 === 0 || i === traversal.length - 1).map((pos) => new THREE.Vector3(...pos)),\r\n          false,\r\n          'catmullrom',\r\n          1\r\n        )\r\n        return new THREE.TubeGeometry(curve, traversal.length * 10, 0.2, 10, true)\r\n      })\r\n      setTracks((store) => {\r\n        store.splice(0)\r\n        store.push(...tracks)\r\n      })\r\n      if (getSkeletons) {\r\n        const skeleton = neurons.map(computeSkeleton)\r\n        setSkeletons((store) => {\r\n          store.splice(0)\r\n          store.push(...skeleton)\r\n        })\r\n      }\r\n    }\r\n    loadData(true)\r\n  }, [swcFiles])\r\n\r\n  useEffect(() => {\r\n    if (animation.phase === 4 && tracks.length > 0) {\r\n      setAnimation((animation) => {\r\n        // animation.index = Math.floor(Math.random() * tracks.length)\r\n        animation.index = (animation.index + 1) % tracks.length\r\n        animation.phase = 0\r\n      })\r\n    }\r\n  }, [animation.phase])\r\n\r\n  return (\r\n    <>\r\n      <color attach=\"background\" args={['#050409']} />\r\n      <fog attach=\"fog\" args={['#070710', 0, 100000]} />\r\n      {/* lighting */}\r\n      <pointLight position={[0, 10000, 10000]} intensity={0.3} />\r\n      <pointLight position={[0, 10000, -10000]} intensity={0.3} />\r\n      <directionalLight position={[10000, -10000, 0]} intensity={0.5} />\r\n      <directionalLight position={[-10000, -10000, 0]} intensity={0.5} />\r\n      {/* async scene */}\r\n      <Suspense fallback={null}>\r\n        {/* {brains.map((props, index) => (\r\n          <Brain key={index} {...props} />\r\n        ))} */}\r\n        <Rig></Rig>\r\n        {/* animated parts */}\r\n        {skeletons.length > animation.index ? (\r\n          <Ensemble\r\n            skeleton={skeletons[animation.index]}\r\n            phase={animation.phase}\r\n            setPhase={(n) =>\r\n              setAnimation((animation) => {\r\n                animation.phase = n\r\n              })\r\n            }\r\n            startBrains={startBrains[animation.index]}\r\n            endBrains={endBrains[animation.index]}\r\n          />\r\n        ) : null}\r\n        {/* {skeletons.map((skeleton, index) => (\r\n          <Action key={index} skeleton={skeleton} />\r\n        ))} */}\r\n        {skeletons.map((skeleton, index) => (\r\n          <Neuron key={index} skeleton={skeleton} visible={animation.index === index} />\r\n        ))}\r\n        <Brain filename={'997.gltf'} color={[1, 1, 1]} opacity={0.1} clearcoatRoughness={0} clearcoat={1} metalness={1} roughness={0.6} />\r\n      </Suspense>\r\n      {Math.hypot(size.width, size.height) > 1080 ? (\r\n        <Minimap mapWidth={((size.height / 2) * 6) / 7} mapHeight={size.height / 2} anchor={'sw'} />\r\n      ) : null}\r\n      {/* <Minimap mapWidth={(size.height * 6) / 7} mapHeight={size.height} anchor={'nw'} /> */}\r\n      <Effects />\r\n      {/* <Effects viewport={[(size.height * 6) / 7, 0, size.width - (size.height * 6) / 7, size.height]} /> */}\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n// r3f\r\nimport { Canvas } from '@react-three/fiber'\r\nimport { OrbitControls } from '@react-three/drei'\r\n// all canvas objects\r\nimport Scene from './Canvas/Scene'\r\n// hooks\r\nimport useMutation from './Hooks/mutation'\r\nimport useStore from './Hooks/store'\r\n\r\nexport default function App() {\r\n  const { mutation } = useMutation()\r\n  const { initAnimation } = useStore()\r\n\r\n  return (<div style={{display: 'flex'}}>\r\n    <Canvas\r\n\tstyle={{width: '1080px', height: '720px'}}\r\n      camera={{ far: 100000, near: 0.1, position: [100000, 100000, 100000] }}\r\n      onCreated={() => {\r\n        initAnimation(mutation)\r\n      }}\r\n    >\r\n      <OrbitControls enableZoom={false} enablePan={false} enableRotate={false} />\r\n      {/* <OrbitControls /> */}\r\n      <Scene />\r\n    </Canvas>\r\n</div>\r\n  )\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nfunction Container(props) {\n  return <div style={{ position: 'absolute', inset: 0 }} {...props} />\n}\n\nReactDOM.render(\n  <Container>\n    <App />\n  </Container>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}